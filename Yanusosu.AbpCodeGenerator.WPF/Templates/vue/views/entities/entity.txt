@using Yanusosu.AbpCodeGenerator.WPF.Models;
<template>
    <div class="app-container">
    <div class="filter-container">
       @foreach(var item in Model.MetaColumnInfos){
                if(item.IsQueryVisible){
   @:<el-input
        @:v-model="request.@(item.CamelCaseName)"
        @:placeholder="@(item.DisplayName)"
        @:style="width: 200px;"
        @:class="filter-item"
        @:clearable
      @:/>
                }}
      <el-button
        v-waves
        class="filter-item"
        type="primary"
        icon="el-icon-search"
        @@click="refresh()"
      >
        搜索
      </el-button>
      <el-button
	   @if(Model.EnableAuthorization){
        @:v-if="hasPermission('Pages.@(Model.ModuleName).@(Model.Name).Create')"
		}
        class="filter-item"
        type="primary"
        icon="el-icon-edit"
        @@click="handleCreate"
      >
        添加
      </el-button>
    </div>
    <el-table
      v-loading="isTableLoading"
      :data="list"
      fit
      highlight-current-row
      style="width: 100%;"
    >
     @foreach(var item in Model.MetaColumnInfos){
                if(item.IsDtoVisible){
      @:<el-table-column
      @:  label="@(item.DisplayName)"
      @:  prop="@(item.CamelCaseName)"
      @:  align="center"
      @:>
      @:</el-table-column>
	  @:
                }}
     
      <el-table-column
        label="操作"
        align="center"
        width="240"
        class-name="fixed-width"
      >
        <template slot-scope="{row}">
          <el-link
		    @if(Model.EnableAuthorization){
            @: v-if="hasPermission('Pages.@(Model.ModuleName).@(Model.Name).Update')"
			}
            type="primary"
            @@click="handleUpdate(row)"
          >
            编辑
          </el-link>
		   <el-divider direction="vertical"></el-divider>
          <el-link
		    @if(Model.EnableAuthorization){
            @: v-if="hasPermission('Pages.@(Model.ModuleName).@(Model.Name).Delete')"
			}
            type="danger"
            @@click="handleDelete(row)"
          >
            删除
          </el-link>
        </template>
      </el-table-column>
    </el-table>

    <pagination
      :total="totalCount"
      :page.sync="currentPage"
      :limit.sync="pageSize"
      @@pagination="refresh()"
    />

  </div>
</template>

<script lang="ts">
import { Component, Vue } from "vue-property-decorator";
import Util from "@@/lib/util";
import Pagination from "@@/components/Pagination/index.vue";

import {
    @(Model.Name)Dto,
} from '@@/api/service-proxies'
import { @(Model.CamelCaseName)Service } from "@@/api/@(Model.ModuleSplitName)/@(Model.SplitName)";

import PagedListBase, {
  PagedRequestDto
} from "@@/lib/view-base/paged-list-base";

class @(Model.Name)PagedRequest extends PagedRequestDto {
   @foreach(var item in Model.MetaColumnInfos){
                if(item.IsQueryVisible){
  @:@(item.CamelCaseName)!: @(GeneratorModule.GetTsEntityKeyName(item.StrDataType));
                }}
}

@@Component({
  name: "@(Model.Name)",
  components:{
    Pagination
  }
})
export default class @(Model.Name) extends PagedListBase<@(Model.Name)PagedRequest,@(Model.Name)Dto> {
  request = new @(Model.Name)PagedRequest()
   
  created() {
    this.refresh()
  }

  getpage(finishCallback: Function): void {
    @(Model.CamelCaseName)Service
    .getAll(
      @foreach(var item in Model.MetaColumnInfos){
                if(item.IsQueryVisible){
        @:this.request.@(item.CamelCaseName),
                }}
        this.request.sorting,
        this.request.skipCount,
        this.request.maxResultCount
      )
      .then(result => {
        this.list = result.items;
        this.showPaging(result);
      })
      .finally(() => {
        finishCallback();
      });
  }
  handleCreate() {
  this.$router.push({ name: "Create@(Model.Name)" });
  }
  handleUpdate(@(Model.CamelCaseName): @(Model.Name)Dto) {
   this.$router.push({
      name: "Update@(Model.Name)",
      params: { id: @(Model.CamelCaseName).id.toString() }
    });
  }
  handleDelete(@(Model.CamelCaseName): @(Model.Name)Dto) {
    this.$confirm("确定删除@(Model.DisplayName)?")
      .then(async () => {
        await @(Model.CamelCaseName)Service.delete(@(Model.CamelCaseName).id);
        this.$notify.success("删除成功");
        this.refresh();
      })
      .catch(() => {});
  }
}
</script>

