<template>
  <div class="form-container">
    <div class="form-main-container">
      <el-form
        ref="form"
        :model="@(Model.CamelCaseName)"
        :rules="rules"
        v-show="@(Model.CamelCaseName).id"
        label-width="80px"
      >
      @foreach(var item in Model.MetaColumnInfos){
        if(item.IsUpdateVisible){
    @:<el-form-item
    @:  label="@(item.DisplayName)"
    @:  prop="@(item.CamelCaseName)"
    @:  >
    @:  <el-input v-model="@(Model.CamelCaseName).@(item.CamelCaseName)"  placeholder="@(item.DisplayName)"></el-input>
    @:</el-form-item>
    @:
      }}

        <el-form-item>
          <el-button
            type="primary"
            :loading="saving"
            @@click="save()"
          >立即修改</el-button>
          <el-button @@click="back()">取消</el-button>
        </el-form-item>
      </el-form>
    </div>
  </div>
</template>

<script lang="ts">
import { Component, Vue } from "vue-property-decorator";
import { @(Model.CamelCaseName)Service } from "@@/api/@(Model.ModuleSplitName)/@(Model.SplitName)";
import FormBase from "@@/lib/view-base/formbase";
import { Update@(Model.Name)Dto } from "@@/api/service-proxies";

@@Component({
  name: "Update@(Model.Name)",
  components: {}
})
export default class Update@(Model.Name) extends FormBase {
  @(Model.CamelCaseName): Update@(Model.Name)Dto = new Update@(Model.Name)Dto();

  rules: object = {
      @foreach(var item in Model.MetaColumnInfos){
        if(item.IsUpdateVisible){
      @:  @(item.CamelCaseName): [
          if(item.Required){
      @:    { required: true, message: "请输入@(item.DisplayName)", trigger: "blur" },  
          }
          if(item.MaxLength.HasValue){
      @:    { max: @(item.MaxLength), message: '@(item.DisplayName)最大长度为@(item.MaxLength)', trigger: 'blur' }  
          }
      @:    
      @:],
        }}
  };

  mounted() {
    this.get@(Model.Name)(+this.$route.params["id"]);
  }

  async get@(Model.Name)(id: number) {
    let @(Model.CamelCaseName) = await @(Model.CamelCaseName)Service.get(id);
    this.@(Model.CamelCaseName) = <Update@(Model.Name)Dto>@(Model.CamelCaseName);
  }

  async submitExecute(): Promise<void> {
    await @(Model.CamelCaseName)Service.update(this.@(Model.CamelCaseName));
  }
}
</script>
