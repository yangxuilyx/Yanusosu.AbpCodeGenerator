/*
* 文  件 名 :    @(Model.Name)AppService.cs
* 描      述 :    @(Model.DisplayName)服务实现
* 创建时间 :    @(@DateTime.Now.ToString())
* ===============================================================================
* @@ Yanusosu 2019. 
* ===============================================================================
*/

using System.Linq;
using Abp.Application.Services;
using Abp.Authorization;
using Abp.Domain.Repositories;
using Abp.Extensions;
using Abp.Linq.Extensions;

@if(Model.EnableAuthorization){
using @(Model.Namespace).Authorization;
}
using @(Model.Namespace).Dto;

namespace @(Model.Namespace)
{
    /// <summary>
    /// @(Model.DisplayName)服务
    /// </summary>
     @{
                if(Model.EnableAuthorization){
    @:[AbpAuthorize(@(Model.Name)AppPermissions.@(Model.Name))]
                }
            }
    public class @(Model.Name)AppService : AsyncCrudAppService<@(Model.Name),@(Model.Name)Dto,@(Model.EntityKeyName),Paged@(Model.Name)ResultRequestDto,Create@(Model.Name)Dto,Update@(Model.Name)Dto>, I@(Model.Name)AppService
    {
        public @(Model.Name)AppService(IRepository<@(Model.Name), @(Model.EntityKeyName)> repository) : base(repository)
        {
            @{
                if(Model.EnableAuthorization){
            @:GetAllPermissionName = @(Model.Name)AppPermissions.@(Model.Name);
            @:GetPermissionName = @(Model.Name)AppPermissions.@(Model.Name);
            @:CreatePermissionName = @(Model.Name)AppPermissions.Create_@(Model.Name);
            @:UpdatePermissionName = @(Model.Name)AppPermissions.Update_@(Model.Name);
            @:DeletePermissionName = @(Model.Name)AppPermissions.Delete_@(Model.Name);
                }
            }
        }

        protected override IQueryable<@(Model.Name)> CreateFilteredQuery(Paged@(Model.Name)ResultRequestDto input)
        {
            return base.CreateFilteredQuery(input)

            // 自定义查询
            @{
            foreach(var item in Model.MetaColumnInfos){
                if(item.IsQueryVisible){
                    switch (item.StrDataType)
                    {
                        case "string":
            @:.WhereIf(!input.@(item.Name).IsNullOrEmpty(),p=>p.@(item.Name).Contains(input.@(item.Name)))
                        break;
                        default:
            @:.WhereIf(input.@(item.Name).HasValue,p=>p.@(item.Name) == input.@(item.Name))
                        break;
                    }
                }
            }
        }
            ;
        }
    }
}